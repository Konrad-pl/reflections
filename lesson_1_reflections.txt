How did viewing a diff between two versions of a file help you see the bug that was introduced?

	viewing a diff with the *nix command

	diff -u new_file.txt old_file.txt

	lets you view the recent changes you made. This allows you to narrow down where a misstake/bug was created.

	the windows version is FC new_file.txt old_file.txt


How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

	Having easy access to the entire history lets you as a programmer to quickly compare older versions to newer version. Also it allows you to revert back to an older version quickly if needed. Or reflect back to an older version.

Version Control

	Any system that allows for sytematic versioning of content.


GIT

Git --> type_of version control

GIT Commit --> component part_of Git

Compare commit versions

git diff ac83483j23j4jkl234jk 5960394m23mlj234j

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

	Pros
		- logical commits on changes to code. This allows you to find bugs easier and makes reading the history easier and keeps it uncluttered.

	Cons
		- Chanace you lose information while making a change to the code

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

	Version control systems are just tools.. so git is a tool used by programmers to track logical changes to multiple files. The code in one file is usually related to multiple files.

	Google Docs is a tool used to save a single file unrealated to other files.

How can you use the commands git log and git diff to view the history of files?

	git log to get two commit ids which you use to compare two commits

	git diff used with two commit ids to view the history of the changes made to those commits

Git Errors
	
	Should not be doing an octopus... This appears when you try and combine many different versions fo code together.

	You are in 'detached HEAD' state... A warning when you switch the HEAD to a previous commit. 

How might using version control make you more confident to make changes that could break something?

	Since you can commit after making a logical change to the code, you can easily use diff between different commits to find out where the code broke. Since the git version-control system will keep a history of all commits. With git it gives you the big picture of the program and allows the freedom to explore the code and different concepts.

Now that you have your workspace set up, what do you want to try using Git for?

	My nano degree in front-end web development.


Commands:

q |    exit git log!
git log  |    List the commits and show which files have changed
git log --stat  |    Show addition information about the commits
git diff id1 id2  |    Compare two commits
git clone  |    Create a local copy/clone from the repository
git config --global color.ui auto |    get colored diff output
git checkout  |    Shows a previous version of the file. This is not a checkout to edit like in SVN or TFS!